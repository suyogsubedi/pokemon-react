{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","number","imgSrc","this","props","id","slice","className","name","src","alt","type","exp","Component","Pokedex","isWinner","pokemon","map","p","base_experience","defaultProps","Pokegame","hand1","hand2","length","randIdx","Math","floor","random","randPokemon","splice","push","exp1","reduce","exp2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.454589bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Pokecard.css\";\n// const POKE_API =\n//   \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\";\nconst POKE_API = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n\nlet padToThree = (number) => (number <= 999 ? `00${number}`.slice(-3) : number);\n\nexport default class Pokecard extends Component {\n  render() {\n    let imgSrc = `${POKE_API}${padToThree(this.props.id)}.png`;\n    return (\n      <div className=\"Pokecard\">\n        <h1 className=\"Pokecard-title\">{this.props.name}</h1>\n        <img src={imgSrc} alt=\"\" />\n        <div className=\"Pokecard-data\">Type:{this.props.type}</div>\n        <div className=\"Pokecard-data\">Experience:{this.props.exp}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Pokecard from \"./Pokecard\";\nimport \"./Pokedex.css\";\nclass Pokedex extends Component {\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: \"Charmender\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"norma\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n    ],\n  };\n  render() {\n    return (\n      <div className=\"Pokedex\">\n        <h1>Pokedex</h1>\n        {/* <p>Total Experience={this.props.exp}</p> */}\n        <p>{this.props.isWinner ? \"Winner\" : \"Looser\"}</p>\n\n        <div className=\"Pokedex-cards\">\n          {this.props.pokemon.map((p) => (\n            <Pokecard id={p.id} type={p.type} exp={p.base_experience} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pokedex;\n","import React, { Component } from \"react\";\nimport Pokedex from \"./Pokedex\";\nclass Pokegame extends Component {\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: \"Charmender\", type: \"fire\", base_experience: 62 },\n      { id: 7, name: \"Squirtle\", type: \"water\", base_experience: 63 },\n      { id: 11, name: \"Metapod\", type: \"bug\", base_experience: 72 },\n      { id: 12, name: \"Butterfree\", type: \"flying\", base_experience: 178 },\n      { id: 25, name: \"Pikachu\", type: \"electric\", base_experience: 112 },\n      { id: 39, name: \"Jigglypuff\", type: \"norma\", base_experience: 95 },\n      { id: 94, name: \"Gengar\", type: \"poison\", base_experience: 225 },\n      { id: 133, name: \"Eevee\", type: \"normal\", base_experience: 65 },\n    ],\n  };\n  render() {\n    let hand1 = [];\n    let hand2 = [...this.props.pokemon];\n    while (hand1.length < hand2.length) {\n      let randIdx = Math.floor(Math.random() * hand2.length);\n      let randPokemon = hand2.splice(randIdx, 1)[0];\n      hand1.push(randPokemon);\n    }\n    let exp1 = hand1.reduce((exp, pokemon) => exp + pokemon.base_experience);\n    let exp2 = hand2.reduce((exp, pokemon) => exp + pokemon.base_experience);\n    return (\n      <div>\n        <Pokedex pokemon={hand1} exp={exp1} isWinner={exp1 > exp2} />\n        <Pokedex pokemon={hand2} exp={exp2} isWinner={exp2 > exp1} />\n      </div>\n    );\n  }\n}\nexport default Pokegame;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport Pokegame from \"./Pokegame\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"Pokecard\">\n        <Pokegame />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}